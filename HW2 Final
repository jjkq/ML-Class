#############################################################################################
# HW2 - 10 Nov 23
#############################################################################################
import scipy as sp
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import h5py
import os
import sys
import numpy as np
import matplotlib.pyplot as plt
import datetime
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import export_graphviz
from sklearn.inspection import permutation_importance
import xarray as xr
import statistics as st
import random
import warnings
# Import tensorflow and keras
import tensorflow as tf
import tensorflow.keras as keras
import tensorflow.keras.layers as layers
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats, odr
#import shap

from sklearn.model_selection import train_test_split

import matplotlib as mpl
#import pydot

sim_dir = '/qdata1/pbrown/dbaseV8/simV8/1810'
#month = '1811'

#print('Files Available:')
#for ifile in os.listdir(sim_dir):
#for ifile in os.listdir(sim_dir+'/'+month):
#  print(ifile)
    
sim_fname = 'GMI.dbsatTb.20181001.026079.sim'
sim_file = sim_dir+'/'+sim_fname
#sim_file = sim_dir+month+'/'+sim_fname


MHSfreqs = np.zeros(12,dtype='f')
MHSviewangles   = np.zeros(15,dtype='f')

with open(sim_file,'rb') as sfile:
    
    sat_id = sfile.read(5)
    sensor = sfile.read(5)
    
    MHSfreqs         = np.fromfile(sfile, dtype='f', count=15)
    MHSviewangles    = np.fromfile(sfile, dtype='f', count=15)

    pix_start        = np.fromfile(sfile, dtype='i', count=1)
    pix_end          = np.fromfile(sfile, dtype='i', count=1)
    scan_start       = np.fromfile(sfile, dtype='i', count=1)
    scan_end         = np.fromfile(sfile, dtype='i', count=1)

    npix   = int(pix_end - pix_start)
    nscans = int(scan_end - scan_start) #2963

    print('File Header Info:')
    print('---------------------------------------------------')
    print(sat_id,sensor)
    print('GMI Frequencies: ')
    print(MHSfreqs)
    print('GMI View Angles: ')
    print(MHSviewangles)
    print('')
    print('Pix Start    = ', pix_start)
    print('Pix End      = ', pix_end)
    print('Scan Start   = ', scan_start)
    print('Scan End     = ', scan_end)
    print('----------------------------------------------------')

    pix         = np.zeros(1, dtype='i')
    scn         = np.zeros(1, dtype='i')
    ds_fpa      = np.zeros([npix,nscans],dtype='f')
    lats        = np.zeros([npix,nscans],dtype='f')
    lons        = np.zeros([npix,nscans],dtype='f')
    elev        = np.zeros([npix,nscans],dtype='f')
    scan_time   = np.zeros([nscans,6],dtype='i')
    sfc_type    = np.zeros([npix,nscans],dtype='i')
    bsfc_precip = np.zeros([npix,nscans],dtype='f')
    conv_precip = np.zeros([npix,nscans],dtype='f')
    emiss_fpa   = np.zeros([13,npix,nscans],dtype='f')
    mfill       = np.zeros(1, dtype='f')
    rwc28       = np.zeros([28,npix,nscans],dtype='f')
    swc28       = np.zeros([28,npix,nscans],dtype='f')
    cwc28       = np.zeros([28,npix,nscans],dtype='f')
    SLH28       = np.zeros([28,npix,nscans],dtype='f')
    gTbsobs     = np.zeros([13,npix,nscans],dtype='f')
    dTbssim_fpa = np.zeros([13,npix,nscans],dtype='f')
    deltaTbs    = np.zeros([13,npix,nscans],dtype='f')
    biasTbs     = np.zeros([13,npix,nscans],dtype='f')
    mfill4      = np.zeros(4, dtype='f')

    
    
    outer = 0

    print('Beginning read loop...')

    

    for iscan in np.arange(0,nscans):
        for ipix in np.arange(0,npix):
            pix = np.fromfile(sfile, dtype='i', count=1)
            scn = np.fromfile(sfile, dtype='i', count=1)
#            print(pix)
            
#            print(scn)


            if np.size(pix) == 0 :
                last_pix = ipix - 1
                last_scan = iscan
                print('File end at scan, pixel = '+str(last_scan)+','+str(last_pix))
                outer = 1
                break

            
            ds_fpa[ipix,iscan]          = np.fromfile(sfile, dtype='f', count=1)
            lats[ipix,iscan]          = np.fromfile(sfile, dtype='f', count=1)
            #print('lat : ', lats[ipix,iscan])
            lons[ipix,iscan]          = np.fromfile(sfile, dtype='f', count=1)
            #print('lon : ', lons[ipix,iscan])
            elev[ipix,iscan]          = np.fromfile(sfile, dtype='f', count=1)
            #print('elev : ', elev[ipix,iscan])
            scan_time[iscan,0:6]      = np.fromfile(sfile, dtype='i', count=6)
            #print('scan time : ', scan_time[iscan,...])
            sfc_type[ipix,iscan]      = np.fromfile(sfile, dtype='i', count=1)
            #print('surface type : ', sfc_type[ipix,iscan])
            bsfc_precip[ipix,iscan] = np.fromfile(sfile, dtype='f', count=1)
            #print('bsfc_precip : ', bsfc_precip[ipix,iscan])
            mfill4 = np.fromfile(sfile, dtype='f', count=4)
            conv_precip[ipix,iscan] = np.fromfile(sfile, dtype='f', count=1)
            #print('conv_precip : ', conv_precip[ipix,iscan])
            emiss_fpa[0:5,ipix,iscan] = np.fromfile(sfile, dtype='f',count=5)
            #print('emiss_fpa 1-5 : ', emiss_fpa[...,ipix,iscan])
            mfill = np.fromfile(sfile, dtype='f', count=1)
            #print('mfill equals : ', mfill)
            emiss_fpa[5:11,ipix,iscan] = np.fromfile(sfile, dtype='f',count=6)
            #print('emiss_fpa 6-11 : ', emiss_fpa[...,ipix,iscan])
            mfill = np.fromfile(sfile, dtype='f', count=1)
            #print('mfill equals : ', mfill)
            emiss_fpa[11:13,ipix,iscan] = np.fromfile(sfile, dtype='f',count=2)
            #print('emiss_fpa 12-13 : ', emiss_fpa[...,ipix,iscan])
            rwc28[0:28,ipix,iscan]         = np.fromfile(sfile, dtype='f', count=28)
            #print('rwc28 : ', rwc28[...,ipix,iscan])
            swc28[0:28,ipix,iscan]         = np.fromfile(sfile, dtype='f', count=28)
            #print('swc28 : ', swc28[...,ipix,iscan])
            cwc28[0:28,ipix,iscan]         = np.fromfile(sfile, dtype='f', count=28)
            #print('cwc28 : ', cwc28[...,ipix,iscan])
            SLH28[0:28,ipix,iscan]  = np.fromfile(sfile, dtype='f', count=28)
            #print('SLH28 : ', SLH28[...,ipix,iscan])
            gTbsobs[0:5,ipix,iscan] = np.fromfile(sfile, dtype='f',count=5)
            #print('gTbsobs 1-5 : ', gTbsobs[...,ipix,iscan])
            mfill = np.fromfile(sfile, dtype='f', count=1)
            gTbsobs[5:11,ipix,iscan] = np.fromfile(sfile, dtype='f',count=6)
            #print('gTbsobs 6-11 : ', gTbsobs[...,ipix,iscan])
            mfill = np.fromfile(sfile, dtype='f', count=1)
            gTbsobs[11:13,ipix,iscan] = np.fromfile(sfile, dtype='f',count=2)
            #print('gTbsobs 12-13 : ', gTbsobs[...,ipix,iscan])
            dTbssim_fpa[0:5,ipix,iscan] = np.fromfile(sfile, dtype='f',count=5)
            mfill = np.fromfile(sfile, dtype='f', count=1)
            dTbssim_fpa[5:11,ipix,iscan] = np.fromfile(sfile, dtype='f',count=6)
            mfill = np.fromfile(sfile, dtype='f', count=1)
            dTbssim_fpa[11:13,ipix,iscan] = np.fromfile(sfile, dtype='f',count=2)
            deltaTbs[0:5,ipix,iscan] = np.fromfile(sfile, dtype='f',count=5)
            mfill = np.fromfile(sfile, dtype='f', count=1)
            deltaTbs[5:11,ipix,iscan] = np.fromfile(sfile, dtype='f',count=6)
            mfill = np.fromfile(sfile, dtype='f', count=1)
            deltaTbs[11:13,ipix,iscan] = np.fromfile(sfile, dtype='f',count=2)
            biasTbs[0:5,ipix,iscan] = np.fromfile(sfile, dtype='f',count=5)
            mfill = np.fromfile(sfile, dtype='f', count=1)
            biasTbs[5:11,ipix,iscan] = np.fromfile(sfile, dtype='f',count=6)
            mfill = np.fromfile(sfile, dtype='f', count=1)
            biasTbs[11:13,ipix,iscan] = np.fromfile(sfile, dtype='f',count=2)
            
            
            exit
            #stop

            
        if outer == 1:
            break


print('Finished read loop')

print('Did it work?')
#############################################################################################
import csv

lenx = last_scan
#header_list = ["Latitude", "Longitude", "pixelStatus", "qualityFlag", "L1CqualityFlag", "surfaceTypeIndex", "totalColumnWaterVaporIndex", "temp2mIndex", "sunGlintAngle", "probabilityOfPrecip", "surfacePrecipitation", "frozenPrecipitation", "convectivePrecipitation", "rainWaterPath", "cloudWaterPath", "iceWaterPath", "precip1stTertial", "precip2ndTertial", "profileTemp2mIndex", "profileNumber1", "profileNumber2", "profileNumber3", "profileNumber4", "profileNumber5", "profileScale1", "profileScale2", "profileScale3", "profileScale4", "profileScale5", "Year", "Month", "DayOfMonth", "Hour", "Minute", "Second", "MilliSecond", "DayOfYear", "SecondOfDay", "SCorientation", "SClatitude", "SClongitude", "SCaltitude", "FractionalGranuleNumber", "dTbs"]
header_list = ["Datasource_fpa", "Latitude", "Longitude", "Elevation","ScanTime1", "ScanTime2", "ScanTime3", "ScanTime4", "ScanTime5", "ScanTime6", "SurfaceType", "bSurfacePrecip", "cConvectivePrecip", "EmissFPA1", "EmissFPA2", "EmissFPA3", "EmissFPA4", "EmissFPA5", "EmissFPA6", "EmissFPA7", "EmissFPA8", "EmissFPA9", "EmissFPA10", "EmissFPA11", "EmissFPA12", "EmissFPA13", "rwc28_1", "rwc28_2", "rwc28_3", "rwc28_4", "rwc28_5", "rwc28_6", "rwc28_7", "rwc28_8", "rwc28_9", "rwc28_10", "rwc28_11", "rwc28_12", "rwc28_13", "rwc28_14", "rwc28_15", "rwc28_16", "rwc28_17", "rwc28_18", "rwc28_19", "rwc28_20", "rwc28_21", "rwc28_22", "rwc28_23", "rwc28_24", "rwc28_25", "rwc28_26", "rwc28_27", "rwc28_28", "swc28_1", "swc28_2", "swc28_3", "swc28_4", "swc28_5", "swc28_6", "swc28_7", "swc28_8", "swc28_9", "swc28_10", "swc28_11", "swc28_12", "swc28_13", "swc28_14", "swc28_15", "swc28_16", "swc28_17", "swc28_18", "swc28_19", "swc28_20", "swc28_21", "swc28_22", "swc28_23", "swc28_24", "swc28_25", "swc28_26", "swc28_27", "swc28_28", "cwc28_1", "cwc28_2", "cwc28_3", "cwc28_4", "cwc28_5", "cwc28_6", "cwc28_7", "cwc28_8", "cwc28_9", "cwc28_10", "cwc28_11", "cwc28_12", "cwc28_13", "cwc28_14", "cwc28_15", "cwc28_16", "cwc28_17", "cwc28_18", "cwc28_19", "cwc28_20", "cwc28_21", "cwc28_22", "cwc28_23", "cwc28_24", "cwc28_25", "cwc28_26", "cwc28_27", "cwc28_28", "SLH28_1", "SLH28_2", "SLH28_3", "SLH28_4", "SLH28_5", "SLH28_6", "SLH28_7", "SLH28_8", "SLH28_9", "SLH28_10", "SLH28_11", "SLH28_12", "SLH28_13", "SLH28_14", "SLH28_15", "SLH28_16", "SLH28_17", "SLH28_18", "SLH28_19", "SLH28_20", "SLH28_21", "SLH28_22", "SLH28_23", "SLH28_24", "SLH28_25", "SLH28_26", "SLH28_27", "SLH28_28", "gTbsOBS_1", "gTbsOBS_2", "gTbsOBS_3", "gTbsOBS_4", "gTbsOBS_5", "gTbsOBS_6", "gTbsOBS_7", "gTbsOBS_8", "gTbsOBS_9", "gTbsOBS_10", "gTbsOBS_11", "gTbsOBS_12", "gTbsOBS_13","dTbsSIM_1", "dTbsSIM_2", "dTbsSIM_3", "dTbsSIM_4", "dTbsSIM_5", "dTbsSIM_6", "dTbsSIM_7", "dTbsSIM_8", "dTbsSIM_9", "dTbsSIM_10", "dTbsSIM_11", "dTbsSIM_12", "dTbsSIM_13", "deltaTbs_1", "deltaTbs_2", "deltaTbs_3", "deltaTbs_4", "deltaTbs_5", "deltaTbs_6", "deltaTbs_7", "deltaTbs_8", "deltaTbs_9", "deltaTbs_10", "deltaTbs_11", "deltaTbs_12", "deltaTbs_13", "biasTbs_1", "biasTbs_2", "biasTbs_3", "biasTbs_4", "biasTbs_5", "biasTbs_6", "biasTbs_7", "biasTbs_8", "biasTbs_9", "biasTbs_10", "biasTbs_11", "biasTbs_12", "biasTbs_13"]

with open('GMI_conversion_test.csv', 'w') as csvfile:
    filewriter = csv.writer(csvfile, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
    filewriter.writerow(header_list)
#    filewriter.writerow(['Latitude', 'Longitude', 'pixelStatus', 'qualityFlag', 'L1CqualityFlag', 'surfaceTypeIndex', 'totalColumnWaterVaporIndex', 'temp2mIndex', 'sunGlintAngle', 'probabilityOfPrecip', 'surfacePrecipitation', 'frozenPrecipitation', 'convectivePrecipitation', 'rainWaterPath', 'cloudWaterPath', 'iceWaterPath', 'precip1stTertial', 'precip2ndTertial', 'profileTemp2mIndex', 'profileNumber1', 'profileNumber2', 'profileNumber3', 'profileNumber4', 'profileNumber5', 'profileScale1', 'profileScale2', 'profileScale3', 'profileScale4', 'profileScale5', 'Year', 'Month', 'DayOfMonth', 'Hour', 'Minute', 'Second', 'MilliSecond', 'DayOfYear', 'SecondOfDay', 'SCorientation', 'SClatitude', 'SClongitude', 'SCaltitude', 'FractionalGranuleNumber'])
    for i in np.arange(0,lenx):
        #filewriter.writerow([Latitude[i,50], Longitude[i,50], pixelStatus[i,50], qualityFlag[i,50], L1CqualityFlag[i,50], surfaceTypeIndex[i,50], totalColumnWaterVaporIndex[i,50], temp2mIndex[i,50], sunGlintAngle[i,50], probabilityOfPrecip[i,50], surfacePrecipitation[i,50], frozenPrecipitation[i,50], convectivePrecipitation[i,50], rainWaterPath[i,50], cloudWaterPath[i,50], iceWaterPath[i,50], precip1stTertial[i,50], precip2ndTertial[i,50], profileTemp2mIndex[i,50], profileNumber[i,50,0], profileNumber[i,50,1], profileNumber[i,50,2], profileNumber[i,50,3], profileNumber[i,50,4], profileScale[i,50,0], profileScale[i,50,1], profileScale[i,50,2], profileScale[i,50,3], profileScale[i,50,4], Year[i], Month[i], DayOfMonth[i], Hour[i], Minute[i], Second[i], MilliSecond[i], DayOfYear[i], SecondOfDay[i], SCorientation[i], SClatitude[i], SClongitude[i], SCaltitude[i], FractionalGranuleNumber[i]])
        filewriter.writerow([ds_fpa[10,i], lats[10,i], lons[10,i], elev[10,i], scan_time[i,0], scan_time[i,1], scan_time[i,2], scan_time[i,3], scan_time[i,4], scan_time[i,5], sfc_type[10,i], bsfc_precip[10,i], conv_precip[10,i], emiss_fpa[0,10,i], emiss_fpa[1,10,i], emiss_fpa[2,10,i], emiss_fpa[3,10,i], emiss_fpa[4,10,i], emiss_fpa[5,10,i], emiss_fpa[6,10,i], emiss_fpa[7,10,i], emiss_fpa[8,10,i], emiss_fpa[9,10,i], emiss_fpa[10,10,i], emiss_fpa[11,10,i], emiss_fpa[12,10,i], rwc28[0,10,i], rwc28[1,10,i], rwc28[2,10,i], rwc28[3,10,i], rwc28[4,10,i], rwc28[5,10,i], rwc28[6,10,i], rwc28[7,10,i], rwc28[8,10,i], rwc28[9,10,i], rwc28[10,10,i], rwc28[11,10,i], rwc28[12,10,i], rwc28[13,10,i], rwc28[14,10,i], rwc28[15,10,i], rwc28[16,10,i], rwc28[17,10,i], rwc28[18,10,i], rwc28[19,10,i], rwc28[20,10,i], rwc28[21,10,i], rwc28[22,10,i], rwc28[23,10,i], rwc28[24,10,i], rwc28[25,10,i], rwc28[26,10,i], rwc28[27,10,i], swc28[0,10,i], swc28[1,10,i], swc28[2,10,i], swc28[3,10,i], swc28[4,10,i], swc28[5,10,i], swc28[6,10,i], swc28[7,10,i], swc28[8,10,i], swc28[9,10,i], swc28[10,10,i], swc28[11,10,i], swc28[12,10,i], swc28[13,10,i], swc28[14,10,i], swc28[15,10,i], swc28[16,10,i], swc28[17,10,i], swc28[18,10,i], swc28[19,10,i], swc28[20,10,i], swc28[21,10,i], swc28[22,10,i], swc28[23,10,i], swc28[24,10,i], swc28[25,10,i], swc28[26,10,i], swc28[27,10,i],  cwc28[0,10,i], cwc28[1,10,i], cwc28[2,10,i], cwc28[3,10,i], cwc28[4,10,i], cwc28[5,10,i], cwc28[6,10,i], cwc28[7,10,i], cwc28[8,10,i], cwc28[9,10,i], cwc28[10,10,i], cwc28[11,10,i], cwc28[12,10,i], cwc28[13,10,i], cwc28[14,10,i], cwc28[15,10,i], cwc28[16,10,i], cwc28[17,10,i], cwc28[18,10,i], cwc28[19,10,i], cwc28[20,10,i], cwc28[21,10,i], cwc28[22,10,i], cwc28[23,10,i], cwc28[24,10,i], cwc28[25,10,i], cwc28[26,10,i], cwc28[27,10,i], SLH28[0,10,i], SLH28[1,10,i], SLH28[2,10,i], SLH28[3,10,i], SLH28[4,10,i], SLH28[5,10,i], SLH28[6,10,i], SLH28[7,10,i], SLH28[8,10,i], SLH28[9,10,i], SLH28[10,10,i], SLH28[11,10,i], SLH28[12,10,i], SLH28[13,10,i], SLH28[14,10,i], SLH28[15,10,i], SLH28[16,10,i], SLH28[17,10,i], SLH28[18,10,i], SLH28[19,10,i], SLH28[20,10,i], SLH28[21,10,i], SLH28[22,10,i], SLH28[23,10,i], SLH28[24,10,i], SLH28[25,10,i], SLH28[26,10,i], SLH28[27,10,i], gTbsobs[0,10,i], gTbsobs[1,10,i], gTbsobs[2,10,i], gTbsobs[3,10,i], gTbsobs[4,10,i], gTbsobs[5,10,i], gTbsobs[6,10,i], gTbsobs[7,10,i], gTbsobs[8,10,i], gTbsobs[9,10,i], gTbsobs[10,10,i], gTbsobs[11,10,i], gTbsobs[12,10,i], dTbssim_fpa[0,10,i], dTbssim_fpa[1,10,i], dTbssim_fpa[2,10,i], dTbssim_fpa[3,10,i], dTbssim_fpa[4,10,i], dTbssim_fpa[5,10,i], dTbssim_fpa[6,10,i], dTbssim_fpa[7,10,i], dTbssim_fpa[8,10,i], dTbssim_fpa[9,10,i], dTbssim_fpa[10,10,i], dTbssim_fpa[11,10,i], dTbssim_fpa[12,10,i], deltaTbs[0,10,i], deltaTbs[1,10,i], deltaTbs[2,10,i], deltaTbs[3,10,i], deltaTbs[4,10,i], deltaTbs[5,10,i], deltaTbs[6,10,i], deltaTbs[7,10,i], deltaTbs[8,10,i], deltaTbs[9,10,i], deltaTbs[10,10,i], deltaTbs[11,10,i], deltaTbs[12,10,i], biasTbs[0,10,i], biasTbs[1,10,i], biasTbs[2,10,i], biasTbs[3,10,i], biasTbs[4,10,i], biasTbs[5,10,i], biasTbs[6,10,i], biasTbs[7,10,i], biasTbs[8,10,i], biasTbs[9,10,i], biasTbs[10,10,i], biasTbs[11,10,i], biasTbs[12,10,i]])

print(lenx)
print('Did it work?')    
#############################################################################################
file = '/home/josh/GPROF_test/Scratch_Code/GMI_conversion_test.csv'
data = pd.read_csv(file, quoting=csv.QUOTE_NONNUMERIC)
print('Did it work?')
#############################################################################################
data.describe()
#############################################################################################
INPUT_VARIABLES = [
    'Datasource_fpa', 
    'Latitude', 
    'Longitude', 
    'Elevation', 
    'ScanTime1', 
    'ScanTime2', 
    'ScanTime3', 
    'ScanTime4', 
    'ScanTime5', 
    'ScanTime6', 
    'SurfaceType', 
    'bSurfacePrecip', 
    'cConvectivePrecip', 
    'EmissFPA1', 
    'EmissFPA2', 
    'EmissFPA3', 
    'EmissFPA4', 
    'EmissFPA5', 
    'EmissFPA6', 
    'EmissFPA7', 
    'EmissFPA8', 
    'EmissFPA9', 
    'EmissFPA10', 
    'EmissFPA11', 
    'EmissFPA12', 
    'EmissFPA13', 
    'rwc28_1', 
    'rwc28_2', 
    'rwc28_3', 
    'rwc28_4', 
    'rwc28_5', 
    'rwc28_6', 
    'rwc28_7', 
    'rwc28_8', 
    'rwc28_9', 
    'rwc28_10', 
    'rwc28_11', 
    'rwc28_12', 
    'rwc28_13', 
    'rwc28_14', 
    'rwc28_15', 
    'rwc28_16', 
    'rwc28_17', 
    'rwc28_18', 
    'rwc28_19', 
    'rwc28_20', 
    'rwc28_21', 
    'rwc28_22', 
    'rwc28_23', 
    'rwc28_24', 
    'rwc28_25', 
    'rwc28_26', 
    'rwc28_27', 
    'rwc28_28', 
    'swc28_1', 
    'swc28_2', 
    'swc28_3', 
    'swc28_4', 
    'swc28_5', 
    'swc28_6', 
    'swc28_7', 
    'swc28_8', 
    'swc28_9', 
    'swc28_10', 
    'swc28_11', 
    'swc28_12', 
    'swc28_13', 
    'swc28_14', 
    'swc28_15', 
    'swc28_16', 
    'swc28_17', 
    'swc28_18', 
    'swc28_19', 
    'swc28_20', 
    'swc28_21', 
    'swc28_22', 
    'swc28_23', 
    'swc28_24', 
    'swc28_25', 
    'swc28_26', 
    'swc28_27', 
    'swc28_28', 
    'cwc28_1', 
    'cwc28_2', 
    'cwc28_3', 
    'cwc28_4', 
    'cwc28_5', 
    'cwc28_6', 
    'cwc28_7', 
    'cwc28_8', 
    'cwc28_9', 
    'cwc28_10', 
    'cwc28_11', 
    'cwc28_12', 
    'cwc28_13', 
    'cwc28_14', 
    'cwc28_15', 
    'cwc28_16', 
    'cwc28_17', 
    'cwc28_18', 
    'cwc28_19', 
    'cwc28_20', 
    'cwc28_21', 
    'cwc28_22', 
    'cwc28_23', 
    'cwc28_24', 
    'cwc28_25', 
    'cwc28_26', 
    'cwc28_27', 
    'cwc28_28', 
    'SLH28_1', 
    'SLH28_2', 
    'SLH28_3', 
    'SLH28_4', 
    'SLH28_5', 
    'SLH28_6', 
    'SLH28_7', 
    'SLH28_8', 
    'SLH28_9', 
    'SLH28_10', 
    'SLH28_11', 
    'SLH28_12', 
    'SLH28_13', 
    'SLH28_14', 
    'SLH28_15', 
    'SLH28_16', 
    'SLH28_17', 
    'SLH28_18', 
    'SLH28_19', 
    'SLH28_20', 
    'SLH28_21', 
    'SLH28_22', 
    'SLH28_23', 
    'SLH28_24', 
    'SLH28_25', 
    'SLH28_26', 
    'SLH28_27', 
    'SLH28_28', 
    'dTbsSIM_13',
]
print('-----------------')
print('Did it work?')
#############################################################################################
data_tbu = data[['gTbsOBS_13'] + INPUT_VARIABLES]

# Creating a numpy array for our inputs and outputs
input_raw = data_tbu[INPUT_VARIABLES].values
output_raw = data_tbu['gTbsOBS_13'].values


# Printing the shapes of our input and output arrays (#samples , #dimension of input/output)
print("Input Array Shape:", input_raw.shape)
print("Output Array Shape:", output_raw.shape)
print('Did it work?')
#############################################################################################
import seaborn as sb
# Distribution of ozone concentrations
sb.displot(output_raw, kind="hist")
plt.xlabel("TBs (K)")

plt.title("Histogram of gTbOBS for Ch 13", fontweight="demi")
plt.plot()
plt.show()
#############################################################################################
def my_loss(y_true, y_pred):
    # term_1 = tf.math.pow(tf.math.maximum(tf.math.abs(y_true), tf.math.abs(y_pred)), 5.0)  # symmetric
    term_1 = tf.math.pow(tf.math.abs(tf.math.maximum(y_true, y_pred)), 10.0)  # asymmetric
    term_2 = tf.math.pow((y_true-y_pred), 2.0)
    loss_value = tf.multiply(term_1, term_2)
    return tf.math.reduce_mean(loss_value)
print('Did it work?')
#############################################################################################
def build_model(x_train, y_train, settings):
    # create input layer
    input_layer = tf.keras.layers.Input(shape=x_train.shape[1:])

    # create a normalization layer if you would like
    normalizer = tf.keras.layers.Normalization(axis=(1,))
    normalizer.adapt(x_train)
    layers = normalizer(input_layer)

    # create hidden layers each with specific number of nodes
    assert len(settings["hiddens"]) == len(
        settings["activations"]
    ), "hiddens and activations settings must be the same length."

    # add dropout layer
    layers = tf.keras.layers.Dropout(rate=settings["dropout_rate"])(layers)

    for hidden, activation in zip(settings["hiddens"], settings["activations"]):
        layers = tf.keras.layers.Dense(
            units=hidden,
            activation=activation,
            use_bias=True,
            kernel_regularizer=tf.keras.regularizers.l1_l2(l1=0, l2=0),
            bias_initializer=tf.keras.initializers.RandomNormal(seed=settings["random_seed"]),
            kernel_initializer=tf.keras.initializers.RandomNormal(seed=settings["random_seed"]),
        )(layers)

    # create output layer
    output_layer = tf.keras.layers.Dense(
        units=1,  # one unit in the output since this is a regression problem
        activation="linear",
        use_bias=True,
        bias_initializer=tf.keras.initializers.RandomNormal(seed=settings["random_seed"] + 1),
        kernel_initializer=tf.keras.initializers.RandomNormal(seed=settings["random_seed"] + 2),
    )(layers)

    # construct the model
    model = tf.keras.Model(inputs=input_layer, outputs=output_layer)
    model.summary()

    return model


def compile_model(model, settings):
    model.compile(
        optimizer=tf.keras.optimizers.Adam(learning_rate=settings["learning_rate"]),
        loss="mse",
        # loss = my_loss,
        metrics=[
            "mse",
            "mae"
        ],
    )
    return model
print('Did it work?')
#############################################################################################
# Split the data into training and testing sets

# Tunable Parameter: Describes the proportion of the dataset we want to use for testing. 1 - split_size is used for training.
split_size = 0.2

# PARAMETERS:
#     test_size: fraction of testing/validation datasets
#     random_state: random parameter
Xtrain, Xval, Ytrain, Yval = train_test_split(
    input_raw, output_raw, test_size=split_size, random_state=42
)
print('Did it work?')
#############################################################################################
settings = {
    "hiddens": [3, 3],
    "activations": ["relu", "relu"],
    "learning_rate": 0.0005,
    "random_seed": 33,
    "max_epochs": 5_000,
    "batch_size": 256,
    "patience": 10,
    "dropout_rate": 0.,
}

tf.keras.backend.clear_session()
tf.keras.utils.set_random_seed(settings["random_seed"])

model = build_model(Xtrain, Ytrain, settings)
model = compile_model(model, settings)
print('Did it work?')
#############################################################################################
# define the early stopping callback
early_stopping_callback = tf.keras.callbacks.EarlyStopping(
    monitor="val_loss", patience=settings["patience"], restore_best_weights=True, mode="auto", verbose=1,
)

# train the model via model.fit
history = model.fit(
    Xtrain,
    Ytrain,
    epochs=settings["max_epochs"],
    batch_size=settings["batch_size"],
    shuffle=True,
    validation_data=[Xval, Yval],
    callbacks=[early_stopping_callback],
    verbose=2,
)
print('Did it work?')
#############################################################################################
# Let's plot the change in loss and categorical_accuracy

fig, axs = plt.subplots(1, 2, figsize=(10, 4))

axs[0].plot(history.history["loss"], label="training")
axs[0].plot(history.history["val_loss"], label="validation")
axs[0].set_xlabel("Epoch")
axs[0].set_ylabel("Loss")
axs[0].legend()

axs[1].plot(history.history["mae"], label="training")
axs[1].plot(history.history["val_mae"], label="validation")
axs[1].set_xlabel("Epoch")
axs[1].set_ylabel("Mean Absolute Error")
axs[1].legend()
plt.show()
#############################################################################################
file = '/home/josh/GPROF_test/Scratch_Code/GMI_conversion_testing_data.csv'
data = pd.read_csv(file, quoting=csv.QUOTE_NONNUMERIC)
print('Did it work?')
#############################################################################################
INPUT_VARIABLES_T = [
    'Datasource_fpa', 
    'Latitude', 
    'Longitude', 
    'Elevation', 
    'ScanTime1', 
    'ScanTime2', 
    'ScanTime3', 
    'ScanTime4', 
    'ScanTime5', 
    'ScanTime6', 
    'SurfaceType', 
    'bSurfacePrecip', 
    'cConvectivePrecip', 
    'EmissFPA1', 
    'EmissFPA2', 
    'EmissFPA3', 
    'EmissFPA4', 
    'EmissFPA5', 
    'EmissFPA6', 
    'EmissFPA7', 
    'EmissFPA8', 
    'EmissFPA9', 
    'EmissFPA10', 
    'EmissFPA11', 
    'EmissFPA12', 
    'EmissFPA13', 
    'rwc28_1', 
    'rwc28_2', 
    'rwc28_3', 
    'rwc28_4', 
    'rwc28_5', 
    'rwc28_6', 
    'rwc28_7', 
    'rwc28_8', 
    'rwc28_9', 
    'rwc28_10', 
    'rwc28_11', 
    'rwc28_12', 
    'rwc28_13', 
    'rwc28_14', 
    'rwc28_15', 
    'rwc28_16', 
    'rwc28_17', 
    'rwc28_18', 
    'rwc28_19', 
    'rwc28_20', 
    'rwc28_21', 
    'rwc28_22', 
    'rwc28_23', 
    'rwc28_24', 
    'rwc28_25', 
    'rwc28_26', 
    'rwc28_27', 
    'rwc28_28', 
    'swc28_1', 
    'swc28_2', 
    'swc28_3', 
    'swc28_4', 
    'swc28_5', 
    'swc28_6', 
    'swc28_7', 
    'swc28_8', 
    'swc28_9', 
    'swc28_10', 
    'swc28_11', 
    'swc28_12', 
    'swc28_13', 
    'swc28_14', 
    'swc28_15', 
    'swc28_16', 
    'swc28_17', 
    'swc28_18', 
    'swc28_19', 
    'swc28_20', 
    'swc28_21', 
    'swc28_22', 
    'swc28_23', 
    'swc28_24', 
    'swc28_25', 
    'swc28_26', 
    'swc28_27', 
    'swc28_28', 
    'cwc28_1', 
    'cwc28_2', 
    'cwc28_3', 
    'cwc28_4', 
    'cwc28_5', 
    'cwc28_6', 
    'cwc28_7', 
    'cwc28_8', 
    'cwc28_9', 
    'cwc28_10', 
    'cwc28_11', 
    'cwc28_12', 
    'cwc28_13', 
    'cwc28_14', 
    'cwc28_15', 
    'cwc28_16', 
    'cwc28_17', 
    'cwc28_18', 
    'cwc28_19', 
    'cwc28_20', 
    'cwc28_21', 
    'cwc28_22', 
    'cwc28_23', 
    'cwc28_24', 
    'cwc28_25', 
    'cwc28_26', 
    'cwc28_27', 
    'cwc28_28', 
    'SLH28_1', 
    'SLH28_2', 
    'SLH28_3', 
    'SLH28_4', 
    'SLH28_5', 
    'SLH28_6', 
    'SLH28_7', 
    'SLH28_8', 
    'SLH28_9', 
    'SLH28_10', 
    'SLH28_11', 
    'SLH28_12', 
    'SLH28_13', 
    'SLH28_14', 
    'SLH28_15', 
    'SLH28_16', 
    'SLH28_17', 
    'SLH28_18', 
    'SLH28_19', 
    'SLH28_20', 
    'SLH28_21', 
    'SLH28_22', 
    'SLH28_23', 
    'SLH28_24', 
    'SLH28_25', 
    'SLH28_26', 
    'SLH28_27', 
    'SLH28_28', 
    'dTbsSIM_13',
]

data_tbu_t = data[['gTbsOBS_13'] + INPUT_VARIABLES_T]

# Creating a numpy array for our inputs and outputs
Xtest = data_tbu_t[INPUT_VARIABLES_T].values
Ytest = data_tbu_t['gTbsOBS_13'].values
print('-----------------')
print('Did it work?')
#############################################################################################
# What predictions did the model make for our training, validation, and test sets?
Ptrain = model.predict(Xtrain)  # Array of predictions
Pval = model.predict(Xval)
Ptest = model.predict(Xtest)
print('Did it work?')
#############################################################################################
error_test = np.abs(Pval - Yval)[:,0]
plt.figure()
plt.plot(Yval, error_test, ".")
plt.xlabel("true value")
#plt.ylabel("predicted value")
plt.ylabel("error_test")
plt.show()
#features = np.array(data_tbu[INPUT_VARIABLES])
#feature_list = list(features.columns)
#############################################################################################
error_test_t = np.abs(Ptest - Ytest)[:,0]
plt.figure()
plt.plot(Ytest, error_test_t, ".")
plt.xlabel("true value")
#plt.ylabel("predicted value")
plt.ylabel("error_test")
plt.show()
#features = np.array(data_tbu[INPUT_VARIABLES])
#feature_list = list(features.columns)
#############################################################################################
plt.plot(Yval, Yval, 'bo', label = 'gTbsOBS_13')
plt.plot(Yval, Pval, 'rx', label = 'gTbsOBS_13')
plt.show()
#############################################################################################
plt.plot(Ytest, Ytest, 'bo', label = 'gTbsOBS_13')
plt.plot(Ytest, Ptest, 'rx', label = 'gTbsOBS_13')
plt.show()
#############################################################################################
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

MSEtr = mean_squared_error(Ytrain,Ptrain)
MAEtr = mean_absolute_error(Ytrain,Ptrain)
MSEv = mean_squared_error(Yval,Pval)
MAEv = mean_absolute_error(Yval,Pval)
MSEt = mean_squared_error(Ytest,Ptest)
MAEt = mean_absolute_error(Ytest,Ptest)

#print('Training MSE : ', MSEtr)
#print('Training MAE : ', MAEtr)
print('-----------------------------------')
print('Validation MSE : ', MSEv)
print('Validation MAE : ', MAEv)
print('-----------------------------------')
print('Testing MSE : ', MSEt)
print('Testing MAE : ', MAEt)
print('-----------------------------------')
#############################################################################################

#############################################################################################

#############################################################################################

#############################################################################################

#############################################################################################

#############################################################################################

#############################################################################################

#############################################################################################
