import numpy as np
import pandas as pd
import scipy as sp
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import h5py
import os
import sys
import numpy as np
import matplotlib.pyplot as plt
import datetime
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import export_graphviz
from sklearn.inspection import permutation_importance
import xarray as xr
import matplotlib.pyplot as plt
import statistics as st
import random
import warnings


#load data
GMI = h5py.File('/pdata4/archive/GPM/2A-CLIM_GMI/1810/181001/2A-CLIM.GPM.GMI.GPROF2017v1.20181001-S002201-E015435.026079.V05A.HDF5', 'r')

S0 = GMI['GprofDHeadr']
S1 = GMI['S1']
ST = S1['ScanTime']
SCs= S1['SCstatus']

Latitude = S1['Latitude'][:]
Longitude = S1['Longitude'][:]
#sunLocalTime = S1['sunLocalTime']
pixelStatus = S1['pixelStatus'][:]
qualityFlag = S1['qualityFlag'][:]
L1CqualityFlag = S1['L1CqualityFlag'][:]
surfaceTypeIndex = S1['surfaceTypeIndex'][:]
totalColumnWaterVaporIndex = S1['totalColumnWaterVaporIndex'][:]
#airmassLiftIndex = S1['airmassLiftIndex']
temp2mIndex = S1['temp2mIndex'][:]
sunGlintAngle = S1['sunGlintAngle'][:]
probabilityOfPrecip = S1['probabilityOfPrecip'][:]
#preciptitationYesNoFlag = S1['preciptiationYesNoFlag']
surfacePrecipitation = S1['surfacePrecipitation'][:]
frozenPrecipitation = S1['frozenPrecipitation'][:]
convectivePrecipitation = S1['convectivePrecipitation'][:]
rainWaterPath = S1['rainWaterPath'][:]
cloudWaterPath = S1['cloudWaterPath'][:]
iceWaterPath = S1['iceWaterPath'][:]
#mostlikelyPrecipitation = S1['mostlikelyPrecipitation']
precip1stTertial = S1['precip1stTertial'][:]
precip2ndTertial = S1['precip2ndTertial'][:]
profileTemp2mIndex = S1['profileTemp2mIndex'][:]
profileNumber = S1['profileNumber'][:]
profileScale = S1['profileScale'][:]
Year = ST['Year'][:]
Month = ST['Month'][:]
DayOfMonth = ST['DayOfMonth'][:]
Hour = ST['Hour'][:]
Minute = ST['Minute'][:]
Second = ST['Second'][:]
MilliSecond = ST['MilliSecond'][:]
DayOfYear = ST['DayOfYear'][:]
SecondOfDay = ST['SecondOfDay'][:]
SCorientation = SCs['SCorientation'][:]
SClatitude = SCs['SClatitude'][:]
SClongitude = SCs['SClongitude'][:]
SCaltitude = SCs['SCaltitude'][:]
FractionalGranuleNumber = SCs['FractionalGranuleNumber'][:]

print('beginning to create new HDF5')
print('-----------------------------------')
testf = h5py.File('HW1_singlef_test2.h5','w') #, libver=('earliest', 'v108'))
#print('creating group')
#print('-----------------------------------')
#testg = testf.create_group("scan")
#print('finished creating group')
#print('-----------------------------------')
print('beginning to create/fill file w/ data')
print('-----------------------------------')
testf.create_dataset('Latitude', data=Latitude)
testf.create_dataset('Longitude', data=Longitude)
testf.create_dataset('pixelStatus', data=pixelStatus)
testf.create_dataset('qualityFlag', data=qualityFlag)
testf.create_dataset('L1CqualityFlag', data=L1CqualityFlag)
testf.create_dataset('surfaceTypeIndex', data=surfaceTypeIndex)
testf.create_dataset('totalColumnWaterVaporIndex', data=totalColumnWaterVaporIndex)
testf.create_dataset('temp2mIndex', data=temp2mIndex)
testf.create_dataset('sunGlintAngle', data=sunGlintAngle)
testf.create_dataset('probabilityOfPrecip', data=probabilityOfPrecip)
testf.create_dataset('surfacePrecipitation', data=surfacePrecipitation)
testf.create_dataset('frozenPrecipitation', data=frozenPrecipitation)
testf.create_dataset('convectivePrecipitation', data=convectivePrecipitation)
testf.create_dataset('rainWaterPath', data=rainWaterPath)
testf.create_dataset('cloudWaterPath', data=cloudWaterPath)
testf.create_dataset('iceWaterPath', data=iceWaterPath)
testf.create_dataset('precip1stTertial', data=precip1stTertial)
testf.create_dataset('precip2ndTertial', data=precip2ndTertial)
testf.create_dataset('profileTemp2mIndex', data=profileTemp2mIndex)
testf.create_dataset('profileNumber', data=profileNumber)
testf.create_dataset('profileScale', data=profileScale)
testf.create_dataset('Year', data=Year)
testf.create_dataset('Month', data=Month)
testf.create_dataset('DayOfMonth', data=DayOfMonth)
testf.create_dataset('Hour', data=Hour)
testf.create_dataset('Minute', data=Minute)
testf.create_dataset('Second', data=Second)
testf.create_dataset('MilliSecond', data=MilliSecond)
testf.create_dataset('DayOfYear', data=DayOfYear)
testf.create_dataset('SecondOfDay', data=SecondOfDay)
testf.create_dataset('SCorientation', data=SCorientation)
testf.create_dataset('SClatitude', data=SClatitude)
testf.create_dataset('SClongitude', data=SClongitude)
testf.create_dataset('SCaltitude', data=SCaltitude)
testf.create_dataset('FractionalGranuleNumber', data=FractionalGranuleNumber)
print('finished creating/filling dataset')
print('-----------------------------------')

print('Did it work?')
